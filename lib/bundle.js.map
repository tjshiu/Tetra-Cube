{"version":3,"sources":["webpack:///webpack/bootstrap 74d0e5f49c0bd96035a9","webpack:///./lib/tetris.js","webpack:///./lib/tetrisBattle.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;AC7DA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH,CAAC;;;;;;;;;;ACtBD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC,qBAAqB,mBAAmB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,Y;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gDAAgD,OAAO;AACvD,uBAAuB,0BAA0B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,uBAAuB;AAC5C,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA,mCAAmC,WAAW;AAC9C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;;;;AAIA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,e;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;AAKA","file":"./lib/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 74d0e5f49c0bd96035a9","import GameView from \"./tetrisBattle.js\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const canvasEl = document.getElementById(\"tetris\");\n  const ctx = canvasEl.getContext(\"2d\");\n  let Game = new GameView(canvasEl, ctx);\n  Game.start();\n  document.addEventListener(\"keydown\", (event) => {\n    if (event.code === \"ArrowLeft\") {\n      Game.pieceMove(-1);\n    } else if (event.code === \"ArrowRight\") {\n      Game.pieceMove(1);\n    } else if (event.code === \"ArrowDown\") {\n      Game.pieceDrop();\n    } else if (event.code === \"KeyA\") {\n      Game.pieceRotate(1);\n    } else if (event.code === \"KeyS\") {\n      Game.pieceRotate(-1);\n    } else if (event.code === \"ArrowUp\") {\n      Game.pieceRotate(1);\n    } else if (event.code === \"Space\") {\n      Game.completeDrop();\n    }\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/tetris.js\n// module id = 0\n// module chunks = 0","\n\n//updating the board\nlet elapsedTime = 0;\nlet timeInterval = 1000;\nlet prevTime = 0;\n\nconst colors = [\n  null, \n  '#DB221C', \n  '#FF7530', \n  '#D6D600',\n  '#0EB532', \n  '#0F4AC1',\n  '#910B8C',\n  '#0D8BA8',\n] //red, orange, yellow, green, blue, green, purple, otherblue\n\nclass GameView {\n  constructor(canvas, ctx) {\n    this.canvas = canvas;\n    this.ctx = ctx;\n    this.ctx.scale(20, 20);\n    this.update = this.update.bind(this);\n    this.board = this.createBoard(12, 20);\n    this.pieceDrop = this.pieceDrop.bind(this);\n    this.pieceMove = this.pieceMove.bind(this);\n    this.pieceRotate = this.pieceRotate.bind(this);\n    this.pieceReset = this.pieceReset.bind(this);\n    this.lineSweep = this.lineSweep.bind(this);\n  }\n  \n  start() {\n    this.pieceReset();\n    this.update();\n  }\n  \n  //Tetris Pieces\n  collides(board, playPiece) {\n    const [mat, position] = [playPiece.matrix, playPiece.pos];\n    for (let y = 0; y < mat.length; y++) {\n      for (let x = 0; x < mat[y].length; x++) {\n        if (mat[y][x] !== 0 && (board[y + position.y] &&\n          board[y + position.y][x + position.x]) !== 0) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n    \n    createPiece(type) {\n      switch (type) {\n        case \"T\": \n          return  [\n            [0, 0, 0],\n            [1, 1, 1],\n            [0, 1, 0] ,\n          ];\n        case \"O\": \n          return [\n            [2, 2],\n            [2, 2]\n          ];\n        case \"L\":\n          return [\n            [0, 3, 0],\n            [0, 3, 0],\n            [0, 3, 3] ,\n          ];\n        case \"J\":\n          return [\n            [0, 7, 0],\n            [0, 7, 0],\n            [7, 7, 0] ,\n          ]; \n        case \"I\":\n          return [\n            [0, 4, 0, 0],\n            [0, 4, 0, 0],\n            [0, 4, 0, 0] ,\n            [0, 4, 0, 0]\n          ];\n        case \"S\":\n          return [\n            [0, 5, 5],\n            [5, 5, 0],\n            [0, 0, 0] ,\n          ];\n        case \"Z\":\n          return [\n            [6, 6, 0],\n            [0, 6, 6],\n            [0, 0, 0] ,\n          ];\n      }\n    }\n\n    pieceReset() {\n      const pieces = \"LJOTSZI\";\n      piece.matrix = this.createPiece(pieces[pieces.length * Math.random() | 0]);\n      piece.pos.y = 0; \n      piece.pos.x = (this.board[0].length / 2 | 0) - (piece.matrix[0].length / 2 | 0);\n      if (this.collides(this.board, piece)) {\n        this.board.forEach(row => row.fill(0));\n        piece.score = 0;\n        this.updateScore();\n      }\n    }\n\n    lineSweep() {\n      let rowCount = 1;\n      outer: for (let y = this.board.length - 1; y > 0; y--) {\n        for (let x = 0; x < this.board[y].length; x++) {\n          if (this.board[y][x] === 0) {\n            continue outer;\n          }\n        }\n        const row = this.board.splice(y, 1)[0].fill(0);\n        this.board.unshift(row);\n        y++;\n\n        piece.score += rowCount * 10;\n        rowCount *= 2;\n      }\n    }\n\n    completeDrop() {\n      while(!this.collides(this.board, piece)) {\n        piece.pos.y += 1;\n      }\n      piece.pos.y--;\n      this.merge(this.board, piece);\n      this.pieceReset();\n      this.lineSweep();\n      this.updateScore();\n      elapsedTime = 0; \n    }\n    \n    pieceDrop() {\n      piece.pos.y += 1;\n      let arena = this.board;\n      if (this.collides(this.board, piece)) {\n        piece.pos.y--;\n        this.merge(this.board, piece);\n        this.pieceReset();\n        this.lineSweep();\n        this.updateScore();\n      }\n      elapsedTime = 0;\n    }\n    \n    pieceMove(dir) {\n      piece.pos.x += dir;\n      if (this.collides(this.board, piece)) {\n        piece.pos.x -= dir;\n      }\n    }\n    \n    pieceRotate(dir) {\n      const pos = piece.pos.x;\n      let offset = 1;\n      this.rotate(piece.matrix, dir);\n      while (this.collides(this.board, piece)) {\n        piece.pos.x += offset;\n        offset = -(offset + (offset > 0 ? 1 : -1));\n        if (offset > piece.matrix[0].length) {\n          this.rotate(piece.matrix, -dir);\n          piece.pos.x = pos;\n          return;\n        }\n      }\n    }\n    \n    rotate(playMatrix, dir) {\n      for (let y = 0; y < playMatrix.length; y++ ) {\n        for (let x = 0; x < y; x++) {\n          [playMatrix[x][y], playMatrix[y][x]] = [playMatrix[y][x], playMatrix[x][y]];\n        }\n      }\n      if (dir > 0) {\n        playMatrix.forEach(row => row.reverse());\n      } else {\n        playMatrix.reverse();\n      }\n    }\n    \n    draw() {\n      this.ctx.fillStyle = '#202328';\n      this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n      this.drawMatrix(this.board, {x: 0, y: 0});\n      this.drawMatrix(piece.matrix, piece.pos);\n    }\n    \n    //drawing the board and set pieces\n    createBoard(x, y) {\n      let emptyBoard = [];\n      while (y > 0) {\n        y--;\n        emptyBoard.push(new Array(x).fill(0, 0, x));\n      }\n      return emptyBoard;\n    }\n    \n    //merge the board and pieces\n    merge(board, pieces) {\n      pieces.matrix.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            board[y + pieces.pos.y][x + pieces.pos.x] = value;\n          }\n        });\n      });\n    }\n    \n\n\n    drawMatrix(matrix, offset) {\n      matrix.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            this.ctx.fillStyle = colors[value]; //red\n            this.ctx.fillRect(x + offset.x,\n              y + offset.y,\n              1, 1);\n              this.ctx.lineWidth = 1/20;\n              this.ctx.strokeStyle = \"white\";\n              this.ctx.strokeRect(x + offset.x,\n                y + offset.y,\n                1, 1);\n                // context.fill();\n              } \n            });\n          });\n        }\n    update(time = 0) {\n      const timeDiff = time - prevTime;\n      prevTime = time;\n      elapsedTime += timeDiff;\n      if (elapsedTime > timeInterval) {\n        this.pieceDrop();\n      }\n      this.draw();\n      requestAnimationFrame(this.update);\n    }\n\n    updateScore() {\n      document.getElementById('score').innerText = piece.score;\n    }\n  }\n      \n      \n     \n      \n      export default GameView;\n      \n      \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/tetrisBattle.js\n// module id = 1\n// module chunks = 0"],"sourceRoot":""}
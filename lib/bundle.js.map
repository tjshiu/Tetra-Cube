{"version":3,"sources":["webpack:///webpack/bootstrap e20c02c7a5df64888a60","webpack:///./lib/tetris.js","webpack:///./lib/tetrisBattle.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;AC7DA;;AAEA;AACA;AACA;AACA;AACA,CAAC,E;;;;;;;ACND;;AAEA;AACA;AACA;AACA;;AAEA;AACA,QAAQ,WAAW;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC,qBAAqB,mBAAmB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA,CAAC;;;AAGD","file":"./lib/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap e20c02c7a5df64888a60","import GameView from \"./tetrisBattle.js\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const canvasEl = document.getElementById(\"tetris\");\n  const ctx = canvasEl.getContext(\"2d\");\n  new GameView(canvasEl, ctx).start();\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/tetris.js\n// module id = 0\n// module chunks = 0","const matrix = [\n  \n  [0, 0, 0],\n  [1, 1, 1],\n  [0, 1, 0] ,\n];\n\nconst piece = {\n  pos: {x: 5, y: 5},\n  matrix: matrix\n};\n//updating the board\nlet elapsedTime = 0;\nlet timeInterval = 1000;\nlet prevTime = 0;\n\nclass GameView {\n  constructor(canvas, ctx) {\n    this.canvas = canvas;\n    this.ctx = ctx;\n    this.ctx.scale(20, 20);\n    this.board = this.createBoard(12, 20);\n  }\n  \n  start() {\n    this.update();\n    console.log(this.board);\n    console.table(this.board);\n    \n  }\n  //Tetris Pieces\n  collides(board, piece) {\n    const [mat, position] = [piece.matrix, piece.pos];\n    for (let y = 0; y < mat.length; y++) {\n      for (let x = 0; x < mat[y].length; x++) {\n        if (mat[y][x] !== 0 && (board[y + position.y] &&\n        board[x + position.x]) !== 0) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  pieceDrop() {\n    piece.pos.y += 1;\n    elapsedTime = 0;\n  }\n\n  draw() {\n    this.ctx.fillStyle = '#202328';\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    this.update = this.update.bind(this);\n    this.drawMatrix(piece.matrix, piece.pos);\n  }\n\n  //drawing the board and set pieces\n  createBoard(x, y) {\n    let emptyBoard = [];\n    while (y > 0) {\n      y--;\n      emptyBoard.push(new Array(x).fill(0, 0, x));\n    }\n    return emptyBoard;\n  }\n\n  //merge the board and pieces\n  merge(board, pieces) {\n    pieces.matrix.forEach((row, y) => {\n      row.forEach((value, x) => {\n        if (value !== 0) {\n          board[y + pieces.pos.y][x + pieces.pos.x] = value;\n        }\n      });\n    });\n  }\n\n  drawMatrix(piece, offset) {\n    piece.forEach((row, y) => {\n      row.forEach((value, x) => {\n        if (value !== 0) {\n          this.ctx.fillStyle = 'red';\n          this.ctx.fillRect(x + offset.x,\n                            y + offset.y,\n                            1, 1);\n          this.ctx.lineWidth = 1/20;\n          this.ctx.strokeStyle = \"white\";\n          this.ctx.strokeRect(x + offset.x,\n                            y + offset.y,\n                            1, 1);\n                            // context.fill();\n        }\n      });\n    });\n  }\n  update(time = 0) {\n    const timeDiff = time - prevTime;\n    prevTime = time;\n    elapsedTime += timeDiff;\n    if (elapsedTime > timeInterval) {\n      this.pieceDrop();\n    }\n    this.draw();\n    requestAnimationFrame(this.update);\n  }\n}\n\ndocument.addEventListener(\"keydown\", (event) => {\n  if (event.code === \"ArrowLeft\") {\n    piece.pos.x -= 1;\n  } else if (event.code === \"ArrowRight\") {\n    piece.pos.x += 1;\n  } else if (event.code === \"ArrowDown\") {\n    GameView.prototype.pieceDrop();\n  }\n});\n\n\nexport default GameView;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/tetrisBattle.js\n// module id = 1\n// module chunks = 0"],"sourceRoot":""}